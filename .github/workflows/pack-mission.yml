name: Package and Release Arma Mission

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  package-mission:
    runs-on: windows-latest

    steps:
    - name: Get latest release (manual trigger)
      if: github.event_name == 'workflow_dispatch'
      shell: bash
      run: |
        LATEST_RELEASE=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name)
        echo "TAG_NAME=$LATEST_RELEASE" >> $GITHUB_ENV

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event_name == 'workflow_dispatch' && env.TAG_NAME || github.ref }}

    - name: Install MakePbo
      shell: cmd
      run: |
        curl -L -o makepbo.exe "https://mikero.bytex.digital/api/download?filename=MakePbo.2.16.9.36.Installer.exe"
        start /wait makepbo.exe /S
        setx PATH "%PATH%;C:\Program Files\MakePbo\"

    - name: Find mission folder
      id: mission-folder
      shell: bash
      run: |
        MISSION_FOLDER=$(find . -maxdepth 1 -type d -name "*.*" | grep -vE "^\./\.git" | head -1)
        echo "folder_name=${MISSION_FOLDER#./}" >> $GITHUB_OUTPUT

    - name: Prepare version and filename
      id: version-info
      shell: bash
      run: |
        VERSION_TAG=${{ github.event_name == 'workflow_dispatch' && env.TAG_NAME || github.ref_name }}
        SIMPLIFIED_VERSION=$(echo "$VERSION_TAG" | tr -d '.' | sed 's/v//i')
        
        IFS='.' read -ra FOLDER_PARTS <<< "${{ steps.mission-folder.outputs.folder_name }}"
        FILENAME="${FOLDER_PARTS[0]}"
        MAPNAME="${FOLDER_PARTS[1]}"
        
        echo "pbo_name=${FILENAME}_v${SIMPLIFIED_VERSION}.${MAPNAME}" >> $GITHUB_OUTPUT
        echo "release_tag=${VERSION_TAG}" >> $GITHUB_OUTPUT

    - name: Package mission
      shell: cmd
      run: |
        makepbo -P -A -X=".txt" "${{ steps.mission-folder.outputs.folder_name }}" "${{ steps.pbo_name.outputs.pbo_name }}"

    - name: Upload to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url || (github.event_name == 'workflow_dispatch' && format('https://uploads.github.com/repos/{0}/releases/{1}/assets', github.repository, env.RELEASE_ID)) }}
        asset_path: ./${{ steps.pbo_name.outputs.pbo_name }}.pbo
        asset_name: ${{ steps.pbo_name.outputs.pbo_name }}.pbo
        asset_content_type: application/octet-stream
