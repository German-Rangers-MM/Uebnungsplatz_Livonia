name: Build and Release Arma Mission PBO

on:
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-pbo:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install GitHub CLI
        run: |
          sudo apt update
          sudo apt install -y curl
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install -y gh


      - name: Determine version tag
        id: version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            version_tag="${{ github.ref_name }}"
          else
            version_tag=$(gh api repos/${{ github.repository }}/releases/latest --jq '.tag_name')
          fi
          echo "version_tag=$version_tag" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Simplify version tag
        id: simplify-version
        run: |
          simplified_version=$(echo "${{ steps.version.outputs.version_tag }}" | sed 's/^v//; s/\.//g')
          echo "simplified_version=v$simplified_version" >> $GITHUB_OUTPUT

      - name: Find mission directory
        id: find-mission
        run: |
          MISSION_DIR=$(find . -type d -name "*.*" | head -1)
          if [ -z "$MISSION_DIR" ]; then
            echo "::error::No mission directory found (looking for pattern 'NAME.MAP')"
            exit 1
          fi
          echo "mission_dir=${MISSION_DIR#./}" >> $GITHUB_OUTPUT

      - name: Extract mission components
        id: mission-components
        run: |
          IFS='.' read -ra parts <<< "${{ steps.find-mission.outputs.mission_dir }}"
          echo "mission_name=${parts[0]}" >> $GITHUB_OUTPUT
          echo "map_name=${parts[1]}" >> $GITHUB_OUTPUT

      - name: Build PBO with Docker
        run: |
          docker run --rm -v "$PWD:/work" jerryhopper/depbo-tools -N \
            "/work/${{ steps.find-mission.outputs.mission_dir }}" \
            "/work/${{ steps.mission-components.outputs.mission_name }}_${{ steps.simplify-version.outputs.simplified_version }}.${{ steps.mission-components.outputs.map_name }}.pbo"

      - name: Upload PBO to release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ steps.version.outputs.version_tag }} \
            "${{ steps.mission-components.outputs.mission_name }}_${{ steps.simplify-version.outputs.simplified_version }}.${{ steps.mission-components.outputs.map_name }}.pbo" \
            --clobber
